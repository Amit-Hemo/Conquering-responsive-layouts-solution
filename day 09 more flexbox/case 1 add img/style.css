/*
taken from challenge 04, we now add photo to the hero/intro section next to the content.
*/

*,
*::before,
*::after {
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: "Roboto", sans-serif;
}

.intro {
  background-color: #23424a;
  padding: 80px 0;
}

.container {
  width: 80%;
  max-width: 1100px;
  margin: 0 auto;
}

.row {
  display: flex;
  gap: 30px;
}

.mid,
.low {
  padding: 3em 0;
  text-align: center;
  font-size: 1.3125rem;
  font-weight: 400;
}

.mid h2 {
  color: #87629a;
}

.low {
  background-color: #136c72;
  color: white;
}

.col {
  width: 100%;
}

.image {
  border: 4px solid pink; /*just to see for the first option that only the image div is stretched and not the image itself, you can play between the options in the html*/
  align-self: flex-start; /*for the second option for not strecthing the image*/
}

.intro__content {
  width: 60%;
  background-color: yellow; /*just to see everything clearly*/
}

#intro__title {
  color: white;
  font-weight: 900;
  font-size: 3rem;
  margin-top: 0; /*removing the default h1 margin from the top so it will align with the picture more correctly*/
}

#intro__p {
  color: rgba(255, 255, 255, 0.85);
  font-size: 1.3125rem;
  font-weight: 400;
  margin-bottom: 3em;
}

.intro__btn {
  background-color: #38cfd9;
  padding: 0.75em 2em;
  border-radius: 100px;
  max-width: 285px;
  text-align: center;
  cursor: pointer;
  transition: opacity 200ms ease-in-out, transform 100ms ease-in-out;
  font-size: 1.3125rem;
}

.intro__btn a {
  letter-spacing: 0.05em;
  text-transform: uppercase;
  font-weight: 700;
  color: #072a2d;
  text-decoration: none;
}

.intro__btn:hover,
.intro__btn:focus {
  opacity: 0.75;
  transform: translateY(-3px);
}

/*Comments:
*the best reason that we wrapped the hero content inside the div intro__content is because now we want to add flex to the container and if we didn't have this intro__content inside so everything (h1,p,btn) will be a flex item -> everything will be next to one another -> not expected. 
but, when we have this intro__content, all the content will be the same as before and only the intro__content will be the flex item because only the direct child of "container row" are flex items...
 so if we want to add an img next to all the content, the intro__content and the img are the direct childs of container, so they both are flex items and will be appear in a row direction.

*flex items always want to be at the same height and it looks weird, how do we get rid of that?
- put the img inside a div and then the img is not a flex item but the div that wraps it does, so it stretches out and we will see it only if we put border or something.
- instead of dealing with more divs, we can add class to the img and in the css use align-self: flex-start, so the image will be aligned to the start of the first flex item.
*/
