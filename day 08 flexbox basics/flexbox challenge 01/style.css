/*
taken from challenge 03, we add flexbox to it resposively.
challenge 04: add more flex container with 2 cols and add the spacing like the design specs that was given. 
*/

*,
*::before,
*::after {
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: "Roboto", sans-serif;
}

.intro {
  background-color: #23424a;
  padding: 80px 0;
}

.container {
  width: 80%;
  max-width: 1100px;
  margin: 0 auto;
}

.row {
  display: flex;
  gap: 30px;
}

.mid,
.low {
  padding: 3em 0;
}

.mid h2 {
  color: #87629a;
}

.low {
  background-color: #136c72;
  color: white;
}

.col {
  width: 100%;
  text-align: center;
  font-size: 1.3125rem;
  font-weight: 400;
}

.intro__content {
  width: 60%;
}

#intro__title {
  color: white;
  font-weight: 900;
  font-size: 3rem;
}

#intro__p {
  color: rgba(255, 255, 255, 0.85);
  font-size: 1.3125rem;
  font-weight: 400;
  margin-bottom: 3em;
}

.intro__btn {
  background-color: #38cfd9;
  padding: 0.75em 2em;
  border-radius: 100px;
  max-width: 285px;
  text-align: center;
  cursor: pointer;
  transition: opacity 200ms ease-in-out, transform 100ms ease-in-out;
  font-size: 1.3125rem;
}

.intro__btn a {
  letter-spacing: 0.05em;
  text-transform: uppercase;
  font-weight: 700;
  color: #072a2d;
  text-decoration: none;
}

.intro__btn:hover,
.intro__btn:focus {
  opacity: 0.75;
  transform: translateY(-3px);
}

/*Comments:
*we always want to create a flex div like this:

- the section with an appropriate name which will include the colors and the padding top and bottom.

- inside it there is a container that center everything and give width with % and max-width so we will know it is responsive.

- then there is the row class which is displayed flex -> flex container. 
we can add this class inside the container (similar to bootstrap naming conventions) or add the class to the container classList.

- inside every row we will have a col -> flex item.
*/
